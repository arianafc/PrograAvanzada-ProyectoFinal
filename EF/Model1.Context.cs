//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoFinal.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CASA_NATURAEntities : DbContext
    {
        public CASA_NATURAEntities()
            : base("name=CASA_NATURAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ACTIVIDADES_TB> ACTIVIDADES_TB { get; set; }
        public virtual DbSet<ANIMAL_TB> ANIMAL_TB { get; set; }
        public virtual DbSet<APADRINAMIENTOS_TB> APADRINAMIENTOS_TB { get; set; }
        public virtual DbSet<CANTONES_TB> CANTONES_TB { get; set; }
        public virtual DbSet<CONSULTAS_TB> CONSULTAS_TB { get; set; }
        public virtual DbSet<DIRECCIONES_TB> DIRECCIONES_TB { get; set; }
        public virtual DbSet<DISTRITOS_TB> DISTRITOS_TB { get; set; }
        public virtual DbSet<DONACIONES_TB> DONACIONES_TB { get; set; }
        public virtual DbSet<ESPECIES_TB> ESPECIES_TB { get; set; }
        public virtual DbSet<ESTADOS_SALUD_TB> ESTADOS_SALUD_TB { get; set; }
        public virtual DbSet<ESTADOS_TB> ESTADOS_TB { get; set; }
        public virtual DbSet<METODO_PAGO_TB> METODO_PAGO_TB { get; set; }
        public virtual DbSet<PROVINCIAS_TB> PROVINCIAS_TB { get; set; }
        public virtual DbSet<RAZAS_TB> RAZAS_TB { get; set; }
        public virtual DbSet<ROLES_TB> ROLES_TB { get; set; }
        public virtual DbSet<USUARIO_ACTIVIDAD_TB> USUARIO_ACTIVIDAD_TB { get; set; }
        public virtual DbSet<USUARIOS_TB> USUARIOS_TB { get; set; }
    
        public virtual int AgregarActividadSP(string descripcion, Nullable<System.DateTime> fecha, Nullable<decimal> precioBoleto, Nullable<int> ticketsDisponibles, string imagen, string tipo, string nombre)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var precioBoletoParameter = precioBoleto.HasValue ?
                new ObjectParameter("PrecioBoleto", precioBoleto) :
                new ObjectParameter("PrecioBoleto", typeof(decimal));
    
            var ticketsDisponiblesParameter = ticketsDisponibles.HasValue ?
                new ObjectParameter("TicketsDisponibles", ticketsDisponibles) :
                new ObjectParameter("TicketsDisponibles", typeof(int));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarActividadSP", descripcionParameter, fechaParameter, precioBoletoParameter, ticketsDisponiblesParameter, imagenParameter, tipoParameter, nombreParameter);
        }
    
        public virtual int CambiarContrasennaSP(string cORREO, string nUEVA_CONTRASENNA)
        {
            var cORREOParameter = cORREO != null ?
                new ObjectParameter("CORREO", cORREO) :
                new ObjectParameter("CORREO", typeof(string));
    
            var nUEVA_CONTRASENNAParameter = nUEVA_CONTRASENNA != null ?
                new ObjectParameter("NUEVA_CONTRASENNA", nUEVA_CONTRASENNA) :
                new ObjectParameter("NUEVA_CONTRASENNA", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CambiarContrasennaSP", cORREOParameter, nUEVA_CONTRASENNAParameter);
        }
    
        public virtual int CambiarEstadoApadrinamientoSP(Nullable<int> idApadrinamiento)
        {
            var idApadrinamientoParameter = idApadrinamiento.HasValue ?
                new ObjectParameter("IdApadrinamiento", idApadrinamiento) :
                new ObjectParameter("IdApadrinamiento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CambiarEstadoApadrinamientoSP", idApadrinamientoParameter);
        }
    
        public virtual int CambioEstadoActividadSP(Nullable<int> idEstado, Nullable<int> idActividad)
        {
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(int));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CambioEstadoActividadSP", idEstadoParameter, idActividadParameter);
        }
    
        public virtual int CompraActividadSP(Nullable<int> idUsuario, Nullable<int> idMetodoPago, Nullable<int> numeroBoletos, Nullable<int> idActividad, string referencia)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idMetodoPagoParameter = idMetodoPago.HasValue ?
                new ObjectParameter("IdMetodoPago", idMetodoPago) :
                new ObjectParameter("IdMetodoPago", typeof(int));
    
            var numeroBoletosParameter = numeroBoletos.HasValue ?
                new ObjectParameter("NumeroBoletos", numeroBoletos) :
                new ObjectParameter("NumeroBoletos", typeof(int));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            var referenciaParameter = referencia != null ?
                new ObjectParameter("Referencia", referencia) :
                new ObjectParameter("Referencia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompraActividadSP", idUsuarioParameter, idMetodoPagoParameter, numeroBoletosParameter, idActividadParameter, referenciaParameter);
        }
    
        public virtual ObjectResult<DetalleActividadSP_Result> DetalleActividadSP(Nullable<int> idActividad)
        {
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DetalleActividadSP_Result>("DetalleActividadSP", idActividadParameter);
        }
    
        public virtual int EditarActividadSP(Nullable<int> idActividad, string descripcion, Nullable<System.DateTime> fecha, Nullable<decimal> precioBoleto, Nullable<int> ticketsDisponibles, string imagen, string tipo, string nombre)
        {
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var precioBoletoParameter = precioBoleto.HasValue ?
                new ObjectParameter("PrecioBoleto", precioBoleto) :
                new ObjectParameter("PrecioBoleto", typeof(decimal));
    
            var ticketsDisponiblesParameter = ticketsDisponibles.HasValue ?
                new ObjectParameter("TicketsDisponibles", ticketsDisponibles) :
                new ObjectParameter("TicketsDisponibles", typeof(int));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarActividadSP", idActividadParameter, descripcionParameter, fechaParameter, precioBoletoParameter, ticketsDisponiblesParameter, imagenParameter, tipoParameter, nombreParameter);
        }
    
        public virtual int InsertarApadrinamientoSP(Nullable<decimal> montoMensual, Nullable<int> idUsuario, Nullable<int> idMetodo, string referencia, Nullable<int> idAnimal)
        {
            var montoMensualParameter = montoMensual.HasValue ?
                new ObjectParameter("MontoMensual", montoMensual) :
                new ObjectParameter("MontoMensual", typeof(decimal));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idMetodoParameter = idMetodo.HasValue ?
                new ObjectParameter("IdMetodo", idMetodo) :
                new ObjectParameter("IdMetodo", typeof(int));
    
            var referenciaParameter = referencia != null ?
                new ObjectParameter("Referencia", referencia) :
                new ObjectParameter("Referencia", typeof(string));
    
            var idAnimalParameter = idAnimal.HasValue ?
                new ObjectParameter("IdAnimal", idAnimal) :
                new ObjectParameter("IdAnimal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarApadrinamientoSP", montoMensualParameter, idUsuarioParameter, idMetodoParameter, referenciaParameter, idAnimalParameter);
        }
    
        public virtual int InsertarDonacionSP(Nullable<decimal> monto, Nullable<int> idUsuario, Nullable<int> idMetodo, string referencia)
        {
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idMetodoParameter = idMetodo.HasValue ?
                new ObjectParameter("IdMetodo", idMetodo) :
                new ObjectParameter("IdMetodo", typeof(int));
    
            var referenciaParameter = referencia != null ?
                new ObjectParameter("Referencia", referencia) :
                new ObjectParameter("Referencia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarDonacionSP", montoParameter, idUsuarioParameter, idMetodoParameter, referenciaParameter);
        }
    
        public virtual ObjectResult<LoginSP_Result> LoginSP(string cORREO, string cONTRASENNA)
        {
            var cORREOParameter = cORREO != null ?
                new ObjectParameter("CORREO", cORREO) :
                new ObjectParameter("CORREO", typeof(string));
    
            var cONTRASENNAParameter = cONTRASENNA != null ?
                new ObjectParameter("CONTRASENNA", cONTRASENNA) :
                new ObjectParameter("CONTRASENNA", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginSP_Result>("LoginSP", cORREOParameter, cONTRASENNAParameter);
        }
    
        public virtual ObjectResult<ObtenerAnimalesActivosSP_Result> ObtenerAnimalesActivosSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerAnimalesActivosSP_Result>("ObtenerAnimalesActivosSP");
        }
    
        public virtual ObjectResult<ObtenerAnimalPorIdSP_Result> ObtenerAnimalPorIdSP(Nullable<int> iD_ANIMAL)
        {
            var iD_ANIMALParameter = iD_ANIMAL.HasValue ?
                new ObjectParameter("ID_ANIMAL", iD_ANIMAL) :
                new ObjectParameter("ID_ANIMAL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerAnimalPorIdSP_Result>("ObtenerAnimalPorIdSP", iD_ANIMALParameter);
        }
    
        public virtual ObjectResult<ObtenerMisAnimalesSP_Result> ObtenerMisAnimalesSP(Nullable<int> iD_USUARIO)
        {
            var iD_USUARIOParameter = iD_USUARIO.HasValue ?
                new ObjectParameter("ID_USUARIO", iD_USUARIO) :
                new ObjectParameter("ID_USUARIO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerMisAnimalesSP_Result>("ObtenerMisAnimalesSP", iD_USUARIOParameter);
        }
    
        public virtual int RegistrarUsuarioSP(string nOMBRE, string aPELLIDO1, string aPELLIDO2, string cORREO, string cONTRASENNA, string iDENTIFICACION)
        {
            var nOMBREParameter = nOMBRE != null ?
                new ObjectParameter("NOMBRE", nOMBRE) :
                new ObjectParameter("NOMBRE", typeof(string));
    
            var aPELLIDO1Parameter = aPELLIDO1 != null ?
                new ObjectParameter("APELLIDO1", aPELLIDO1) :
                new ObjectParameter("APELLIDO1", typeof(string));
    
            var aPELLIDO2Parameter = aPELLIDO2 != null ?
                new ObjectParameter("APELLIDO2", aPELLIDO2) :
                new ObjectParameter("APELLIDO2", typeof(string));
    
            var cORREOParameter = cORREO != null ?
                new ObjectParameter("CORREO", cORREO) :
                new ObjectParameter("CORREO", typeof(string));
    
            var cONTRASENNAParameter = cONTRASENNA != null ?
                new ObjectParameter("CONTRASENNA", cONTRASENNA) :
                new ObjectParameter("CONTRASENNA", typeof(string));
    
            var iDENTIFICACIONParameter = iDENTIFICACION != null ?
                new ObjectParameter("IDENTIFICACION", iDENTIFICACION) :
                new ObjectParameter("IDENTIFICACION", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarUsuarioSP", nOMBREParameter, aPELLIDO1Parameter, aPELLIDO2Parameter, cORREOParameter, cONTRASENNAParameter, iDENTIFICACIONParameter);
        }
    
        public virtual int RegistroSP(string nOMBRE, string aPELLIDO1, string aPELLIDO2, string cORREO, string cONTRASENNA, string iDENTIFICACION)
        {
            var nOMBREParameter = nOMBRE != null ?
                new ObjectParameter("NOMBRE", nOMBRE) :
                new ObjectParameter("NOMBRE", typeof(string));
    
            var aPELLIDO1Parameter = aPELLIDO1 != null ?
                new ObjectParameter("APELLIDO1", aPELLIDO1) :
                new ObjectParameter("APELLIDO1", typeof(string));
    
            var aPELLIDO2Parameter = aPELLIDO2 != null ?
                new ObjectParameter("APELLIDO2", aPELLIDO2) :
                new ObjectParameter("APELLIDO2", typeof(string));
    
            var cORREOParameter = cORREO != null ?
                new ObjectParameter("CORREO", cORREO) :
                new ObjectParameter("CORREO", typeof(string));
    
            var cONTRASENNAParameter = cONTRASENNA != null ?
                new ObjectParameter("CONTRASENNA", cONTRASENNA) :
                new ObjectParameter("CONTRASENNA", typeof(string));
    
            var iDENTIFICACIONParameter = iDENTIFICACION != null ?
                new ObjectParameter("IDENTIFICACION", iDENTIFICACION) :
                new ObjectParameter("IDENTIFICACION", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistroSP", nOMBREParameter, aPELLIDO1Parameter, aPELLIDO2Parameter, cORREOParameter, cONTRASENNAParameter, iDENTIFICACIONParameter);
        }
    
        public virtual ObjectResult<VisualizarActividadesActivasSP_Result> VisualizarActividadesActivasSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VisualizarActividadesActivasSP_Result>("VisualizarActividadesActivasSP");
        }
    
        public virtual ObjectResult<VisualizarActividadesSP_Result> VisualizarActividadesSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VisualizarActividadesSP_Result>("VisualizarActividadesSP");
        }
    
        public virtual ObjectResult<VisualizarApadrinamientosSP_Result> VisualizarApadrinamientosSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VisualizarApadrinamientosSP_Result>("VisualizarApadrinamientosSP");
        }
    
        public virtual ObjectResult<VisualizarAnimalesSP_Result> VisualizarAnimalesSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VisualizarAnimalesSP_Result>("VisualizarAnimalesSP");
        }
    
        public virtual int CambiarEstadoAnimalSP(Nullable<int> idAnimal, Nullable<int> idEstado)
        {
            var idAnimalParameter = idAnimal.HasValue ?
                new ObjectParameter("IdAnimal", idAnimal) :
                new ObjectParameter("IdAnimal", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CambiarEstadoAnimalSP", idAnimalParameter, idEstadoParameter);
        }
    
        public virtual int EditarAnimalSP(Nullable<int> idAnimal, string nombre, Nullable<int> idRaza, Nullable<System.DateTime> fechaNacimiento, Nullable<System.DateTime> fechaIngreso, string historia, string necesidad, string imagen)
        {
            var idAnimalParameter = idAnimal.HasValue ?
                new ObjectParameter("IdAnimal", idAnimal) :
                new ObjectParameter("IdAnimal", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var idRazaParameter = idRaza.HasValue ?
                new ObjectParameter("IdRaza", idRaza) :
                new ObjectParameter("IdRaza", typeof(int));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var fechaIngresoParameter = fechaIngreso.HasValue ?
                new ObjectParameter("FechaIngreso", fechaIngreso) :
                new ObjectParameter("FechaIngreso", typeof(System.DateTime));
    
            var historiaParameter = historia != null ?
                new ObjectParameter("Historia", historia) :
                new ObjectParameter("Historia", typeof(string));
    
            var necesidadParameter = necesidad != null ?
                new ObjectParameter("Necesidad", necesidad) :
                new ObjectParameter("Necesidad", typeof(string));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarAnimalSP", idAnimalParameter, nombreParameter, idRazaParameter, fechaNacimientoParameter, fechaIngresoParameter, historiaParameter, necesidadParameter, imagenParameter);
        }
    }
}
